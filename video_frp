var utils = require('users/gena/packages:utils');
var text = require('users/gena/packages:text');
var start = ee.Date('2019-08-21');
var finish = ee.Date('2019-08-23');
var bounds = ee.Geometry.Rectangle([-60, -21, -56, -17], null, true);

var image = ee.Image('NOAA/GOES/16/FDCF/2019167024053900000');
var area = image.select('Area');
var temp = image.select('Temp');
var dqf = image.select('DQF');
var frp = ee.ImageCollection("NOAA/GOES/16/FDCF").select('Power').filterDate(start,finish).filterBounds(bounds);
var dqf = ee.ImageCollection("NOAA/GOES/16/FDCF").select('DQF').filterDate(start,finish).filterBounds(bounds);   
//print(dqf,'dqf');

var xmin = -142;  // On station as GOES-E
var xmax = xmin + 135;
Map.setCenter((xmin+xmax)/2, 15, 3);



var DQFVis = {
  min: 0,
  max: 5,
  palette: [
    'red',  // Good quality fire pixel
    'olive',           // Good quality fire free land
    'dcd159',            // Opaque cloud
                       // Bad surface type, sunglint, LZA threshold exceeded,
    '1c0dff',   // off earth, or missing input data
    'lemonchiffon',    // Bad input data
    'burlywood'        // Algorithm failure
  ]};
var frpVis = {
  min: 0,
  max: 2000,
  palette: [
     'purple', 'cyan', 'green', 'yellow', 'red'
  ]};  
  
Map.addLayer(dqf, DQFVis, 'DQF');
Map.addLayer(frp, frpVis, 'FRP');


//add timestamp
//make the data 8-bit which is necessary for making a video
var animation =  frp.map(function(image){
  var start = ee.Date(image.get('system:time_start'));
  var end = ee.Date(image.get('system:time_end'));
  var label = start.format('YYYY-MM-dd-HH:mm');
  
  return image.visualize(frpVis).clip(bounds).set({label: label});
});
// annotate
var annotations = [
  {
    position: 'left', offset: '1%', margin: '1%', property: 'label', scale: Map.getScale()*0.1
  }
]

animation = animation.map(function(image) {
  return text.annotateImage(image, {}, bounds, annotations)
})


// Define GIF visualization parameters.
var gifParams = {
  'region': bounds,
  'dimensions': 300,
  
  'framesPerSecond': 10
};

// Print the GIF URL to the console.
print(animation.getVideoThumbURL(gifParams));





// set position of panel
var legend = ui.Panel({
style: {
position: 'bottom-left',
padding: '8px 15px'
}
});
 
// Create legend title
var legendTitle = ui.Label({
value: 'n gauges',
style: {
fontWeight: 'bold',
fontSize: '18px',
margin: '0 0 4px 0',
padding: '0'
}
});
 
// Add the title to the panel
legend.add(legendTitle);
 
// create the legend image
var lon = ee.Image.pixelLonLat().select('latitude');
var gradient = lon.multiply((frpVis.max-frpVis.min)/100.0).add(frpVis.min);
var legendImage = gradient.visualize(frpVis);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(frpVis['max'])
],
});
 
legend.add(panel);
 
// create thumbnail from the image
var thumbnail = ui.Thumbnail({
image: legendImage,
params: {bbox:'0,0,10,100', dimensions:'10x200'},
style: {padding: '1px', position: 'bottom-center'}
});
 
// add the thumbnail to the legend
legend.add(thumbnail);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(frpVis['min'])
],
});
 
legend.add(panel);
 
Map.add(legend);





/*
//Export NDVI from whole study area to video
Export.video.toDrive({
  collection: dqf,
  description: "fireamazon2019",    // Filename, no spaces allowed
  framesPerSecond: 10,             // I.e., 1 year / second
  region: bounds,
  scale: 2000,                     // Scale in m
  });




/*
// Fires are small enough that they are difficult to see at the scale of
// an entire GOES image.  Buffer fires based on area to make them stand out.
var area = area.reduceToVectors({
  geometry: geometry,
  scale: 2000,
  geometryType: 'centroid',
  labelProperty: 'area',
  maxPixels: 1e10,
}).map(function(feature){
  return feature.buffer(ee.Number(feature.get('area')).add(1).pow(1.76));
});
Map.addLayer(area, {color: 'orange'}, 'area');

// Buffer fires based on temperature to make them stand out.
var temp = temp.reduceToVectors({
  geometry: geometry,
  scale: 2000,
  geometryType: 'centroid',
  labelProperty: 'temp',
  maxPixels: 1e10,
}).map(function(feature){
  return feature.buffer(ee.Number(feature.get('temp')).add(2).pow(1.3));
});
//Map.addLayer(temp, {color: 'red'}, 'temp');.
// Create RGB visualization images for use as animation frames.
var rgbVis = dqf.map(function(img) {
  return img.visualize(DQFVis);
});
*/